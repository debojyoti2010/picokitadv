from machine import Pin, I2C, ADC
from ssd1306 import SSD1306_I2C
import time
import random
import framebuf

WIDTH = 128
HEIGHT = 64

buffer = bytearray(b'\xff\xff\xff\xff\x81<l\x8f\xff\xff\xf8\xbf\xff\xff\xff\xff\xff\xff\xff\xc14\x0b\x92o\xfe\xf7\xbf\xbf\xbf\xff\xff\xff\xff\xff\xff\xedQ/\xe7\xea^\xf5\xfc\x9f\xff\xfd\xff\xff\xff\xff\xf7\x90?\xdf\x9e\x97\xff\xd8\xda\xe7\xfe|\xaf\xff\xff\xff\xf6\x80\x80\xda\xb6\xfd\xef\xc8\xa3s\xff\xfc\xff?\xff\xff\x7f\x83\x1e\xff\x90U\xd9\xdf\xf0\x89\xff\xbfU\x7f\xff\xff\xe8a\xf7\xef_\xad\xef\xff\xf2vg\xff\xbf\xff\xff\xfe\xd0\x1d \xf7\xcf\x8b\xf7\xde\xdd\x87\xff\xf7\xfb\xff\xff\xff\x05\xb7\xef\x9f\xff\x83\xec\xbf\x9f\xd6\xe7\xff\xff\xff\xff\xfd\xf7?I\xbd\xee\x93}\xcd\xff\xfe\xff\xb5\xff\xfb\xff\xff\xdd\xbd\xf2\xdfd;\xcf\xfd\xff\x7f\xf7\xff\xff\xdf\xff\xfd\xe8\xdf\xdf\xfc\x04P\xbf\xfe\xcf\xea\xbe\xff\xff\xbf\xff\xfd\x92\x0f\xef\xa0`\xc9\xfc\xff\xff\xef\xef\xff\xff\xff\xff\xf6}\xaf\xf8\x86L\xd1\xa5\xfe\xdf\xfe\xfb\xfb\xff\xdf\xff\xf7\xf3\xf6e\xc2\xc8\x00\x80n\xff\xbf\xff\xdf\xdd\xff\xff\xce\xf2\xfc\xbf\x88\x18\x1e>\xaf?\xff\xf3\xff\x7f\xff\xff\xef\x0f\x9a\x0eA\x03\ra\x8f\xfd\xff\xfb\xf7\xff\xf7\xff\xfd\x01\x00l\x00hm\x81{\xef\xff\xff\xff\xff\xff\xff\xff\xe5h\xa8\x10\xdc\xe6g\xf7\xaf\xff\xff\xff\xff\xfd\xff\xf9\xe2\x18\x11\x0b\xd2\xf6\x07\x01\xc7\xbb\xff\xff\xfe\xff\xff\x9e\n\x11S\x82\xf7r\xd1\x9d\x9b\xdf\xdf\xff\xff\xdf\xff\xcd\xc0T\x1dO\xff\xfa8[\xce\xf7\xef\xff\xff\xff\xff\x7f\x040\x06W\xf6\xfea\xcf\xfb\xff\xef\xed\xff\xff\xff\xde[\xb83\xbea\x9f\xae\xe5\xb7\xdf\x0f\xff\xdf\xff\xff\xf1\x1d\xc1R\xfe\x19G\x83\xbf\xb9\xfe\x11\xff\xdb\xfd\xff\xe3\x04\x00C\xfa6\xff(\xb0\xdd\xff9\xff\xdf\xff\xff\x9f\x88\x00\x9c\xbe\xd4\xd5\xf1\xfc\xdd\xc9\xf7\xfb\xfb\xff\xff\xf6\x80\r\xf6\xfb|\x8c\t\x95\x9f\xad\xea\xef\xfe\xff\xff\xd9#\xae\xb3s\x8bq\xefy\xfd\xfe\x7fw\xff\xff\xff\xe7\x01(\xc4x\x17\xfb\xff$\xdf\xf4\xf4\x7f\xb7\xff\xff\xfc\x84\x9f\x8c\xd5y\x86Q\xf9l\x9f\xcf\xff\xff\xff\xff\xfc\x10\x88\xf5\x167v\xed\xe6\x17\x7f\xdd\xaf\xff\xbf\xff>\xa0\xfe`\xf3~\x8b\xbf\xff\xd7\xff~\xdf\xfe\xdf\xfc\xd3e\xfd?g\xd5\x0c\xf9\xe5\xf7\xff\xdb\xed{\xff\xff\x96_\xfc\xb0<l\x07\x8e\x17\xdf\xf7\xff\xfb\xc9\xfa\xff\xd9\xff\xebz~\xd0\xe7.\xef\xbb\xff\xff\xff\xf7\x7f\xff\xa4\x1e\xc0\xdf\x7fB\xfb\xbc\xfe\x0f\xff\x97\xff\xff\xfb\xff\xc2\x8e\x80\xcdf\xf6h\xfc\xe7\x17O\xda\xfa\xfd\xfc\xff\xe8\x06%a\xf0|%\xdaX>\xdf\x7f\xff\xef\xff\xff\xc0\x01\x12\'\x0e\xc4\xf3\x018\xff\xbf\xfb\xff\xff\x7f\xff\xd4\x06\x813@\xd0\x98\xf1\xbe\x95\xdf\xf6\xff\xdb\xff\xff\xf4\x01Di\x1bp\xb3\x96v\xf2\xff\xfb\xfe\xff\xbf\xff\xe0\x03\x86\x0f\xff$o\x9b/\x83?\xbf\xfb\xff\xff\xff\x8c\x0f\xf8%\x9d[\xa7_G\'\xca\xff\xef\xff\xe7\xff\xfb\xaf\xef\xef\xfe\x1b\xce\xc0\'\xda\x7f\xff\xff\x7f\xff\xff\xfea\x03\x17\xff~w\xf7\x04Ns\x8f\xff\xdd\xfd\xff\xe0\xc0P\t\xff\xdb\xa5\xf8\x8c\xbd\xd4\xbf\xeb\xfe\xff\xff\xf8\x80\x01\xc0\xb6\xdf\xe9\xf1\x07\xbf\xa7\xf7\xff\xff\xbe\xff\xec\x80\x00\x84N\xe6u\xcf\xc6G\xfc\xff\xef\xff\xff\xff\xf2\x10\x81\x1a\x0f\xeb\xa6@\x07\xefw\xfe\xfe}\xff\xff\xf0\x00\xa0@\x03\x9b\xd7\xf7>\xfdO\xff\xf3\xbf\xff\xff\xfc\x00@\x00"\x17\xfc{O\xfa\xcf\xf5\xff\xfe\xff\xff\xf9\x00\xd4B]\xf6-\xf1\xafu\xe5\xfa\xff\xff~\xff\xef\x80\x12\x90\xde\xb6g\xf6\xbd\xff\xb7\xbf\\\xff\xff\xff\xd6:\x12p\xebT\xe3\xf7{\x96\xbf\xbb\xfa\xff\xff\xff\xf6\xc0\xcd\x1f\xde\x7f\x9e7\xad\xfd\xff\xff\xff\xdf\xbf\xff\xff\xe8O\x1f\x99\x99\'\xc7\xff+\xbf\xff\xff\xff\xfe\xff\xf7\xdc\xd7|\xcc\x8f/\xf9\xfd\xbf\xff\xff\xff\xff\xff\xff\xff\x7f\x9e\xe5o\xafK\xe7\xef\xa5\xff\xff\xff\xff\xff\xff\xff\xe2\xf8cse\xb4\xc9\xef\xed\xff\xff\xf7\xbf\xfe\xff\xff\xf7\xdb\xd4\t_\xb7\xefw\xbf\xff\xff\xff\xbf\xff\xff\xfe\xb0\xffx\xeb\x91\x0cQ\x9ew\xff\xff\xff\xff\xff\xff\xff>\xfc\xc9\xac\x97\x0f\xff\xef\xff\xff\xef\xff\xff\xff\xff\xff\xf9]\xda^\xb1l]y\x7f\xff\xff\xff\xff\xff')

fb = framebuf.FrameBuffer(buffer, 128, 64, framebuf.MONO_HLSB)

i2c = I2C(0, scl=Pin(13), sda=Pin(12), freq=200000)

oled = SSD1306_I2C(WIDTH, HEIGHT, i2c)

i = 0
while True:
    # clear screen
    oled.fill(0)
    i+=1

    # put framebuffer on screen
    oled.blit(fb, 0, 0)

    # draw pixel
    # oled.pixel(30, 33, 1)
    # draw rectangle
    oled.fill_rect(random.randint(15, WIDTH), random.randint(15, HEIGHT), 5, 5, 1)

    # draw line
    oled.line(random.randint(0, WIDTH), random.randint(0, HEIGHT), random.randint(0, WIDTH), random.randint(0, HEIGHT), 1)

    # invert screen 0/1
    oled.invert(0)

    # Put text on screen
    #oled.text("Hello World", 0, 0)
    oled.text('Sequence ' + str(i) + ' time', 2, 32)
    
    for j in range(0, 100):
        oled.pixel(random.randint(1, WIDTH), random.randint(1, HEIGHT), 1)

    # Display
    oled.show()
    
    time.sleep(1)